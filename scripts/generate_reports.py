# -*- coding: utf-8 -*-
import json, os
from reportlab.lib.pagesizes import landscape, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from pptx import Presentation
from pptx.util import Pt
from pptx.dml.color import RGBColor

DATA_FILE = "data/input.json"
OUT_DIR = "output"
PDF_PATH = os.path.join(OUT_DIR, "–í–û–õ–°_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.pdf")
PPTX_PATH = os.path.join(OUT_DIR, "–í–û–õ–°_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.pptx")

def ensure_fonts():
    # –ù—É–∂–Ω—ã –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è PDF
    djv = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
    djv_b = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    pdfmetrics.registerFont(TTFont("DejaVuSans", djv))
    pdfmetrics.registerFont(TTFont("DejaVuSans-Bold", djv_b))

def build_pdf(d):
    os.makedirs(OUT_DIR, exist_ok=True)
    ensure_fonts()

    styles = getSampleStyleSheet()
    styles["Normal"].fontName = "DejaVuSans"
    styles["Normal"].fontSize = 12
    styles["Heading1"].fontName = "DejaVuSans-Bold"
    styles["Heading2"].fontName = "DejaVuSans-Bold"

    doc = SimpleDocTemplate(PDF_PATH, pagesize=landscape(A4))
    E = []
    E.append(Paragraph(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø–æ–¥–≤–µ—Å—É –í–û–õ–° (–Ω–∞ {d['as_of']})", styles["Heading1"]))
    E.append(Spacer(1, 18))

    # 1. –û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    E.append(Paragraph("1. –û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", styles["Heading2"]))
    t1 = [
        ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"],
        ["–í—ã—è–≤–ª–µ–Ω–æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –æ–ø–æ—Ä", f"{d['totals']['found']:,}".replace(',', ' ')],
        ["–£–∑–∞–∫–æ–Ω–µ–Ω–æ", f"{d['totals']['legalized']:,}".replace(',', ' ')],
        ["–î–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ 2025", f"{d['totals']['removed_2025']:,}".replace(',', ' ') + f" (–≤ 2024 ‚Äî {d['totals']['removed_2024']:,}".replace(',', ' ') + ")"],
        ["–í —Ä–∞–±–æ—Ç–µ", f"{d['totals']['in_work']:,}".replace(',', ' ') + f" (–ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª ‚Äî {d['totals']['rostelecom']:,}".replace(',', ' ') + ")"],
    ]
    tbl1 = Table(t1, colWidths=[300, 300])
    tbl1.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 12),
    ]))
    E.append(tbl1); E.append(Spacer(1, 12))

    # 2. –î–µ–º–æ–Ω—Ç–∞–∂ 2025
    E.append(Paragraph("2. –î–µ–º–æ–Ω—Ç–∞–∂ 2025", styles["Heading2"]))
    t2 = [["–§–∏–ª–∏–∞–ª", "–î–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ / –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"]]
    for r in d["dismantled_2025"]:
        t2.append([r["branch"], f"{r['count']:,}".replace(',', ' ') + (f" ({r['notes']})" if r.get("notes") else "")])
    tbl2 = Table(t2, colWidths=[300, 300])
    tbl2.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 12),
    ]))
    E.append(tbl2); E.append(Spacer(1, 12))

    # 3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π —Ä–∏—Å–∫–∞
    E.append(Paragraph("3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã (–∑–æ–Ω—ã —Ä–∏—Å–∫–∞)", styles["Heading2"]))
    t3 = [["–§–∏–ª–∏–∞–ª", "–û–ø–æ—Ä—ã –≤ —Ä–∞–±–æ—Ç–µ / –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–†–∏—Å–∫"]]
    risk_color = {"high": colors.red, "medium": colors.orange, "low": colors.darkgoldenrod}
    for r in d["key_branches"]:
        t3.append([r["branch"], f"{r['in_work']} ({r['note']})", r["risk"]])
    tbl3 = Table(t3, colWidths=[250, 300, 50])
    tbl3_style = [
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 12),
        ("ALIGN", (2,1), (2,-1), "CENTER"),
    ]
    # —Ä–∞—Å–∫—Ä–∞—Å–∏–º –∫–æ–ª–æ–Ω–∫—É ¬´–†–∏—Å–∫¬ª
    for i, r in enumerate(d["key_branches"], start=1):
        tbl3_style.append(("TEXTCOLOR", (2, i), (2, i), risk_color[r["risk"]]))
    tbl3.setStyle(TableStyle(tbl3_style))
    E.append(tbl3); E.append(Spacer(1, 12))

    # 4. –†–æ—Å—Ç–µ–ª–µ–∫–æ–º
    E.append(Paragraph("4. –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª (–æ–±—â–∏–π –æ–±—ä—ë–º: " + f"{d['totals']['rostelecom']:,}".replace(',', ' ') + " –æ–ø–æ—Ä)", styles["Heading2"]))
    t4 = [["–§–∏–ª–∏–∞–ª", "–°—Ç–∞—Ç—É—Å"]]
    for r in d["rostelecom"]:
        t4.append([r["branch"], r["note"]])
    tbl4 = Table(t4, colWidths=[250, 350])
    tbl4.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "DejaVuSans"),
        ("FONTSIZE", (0,0), (-1,-1), 12),
    ]))
    E.append(tbl4); E.append(Spacer(1, 12))

    # 5. –í—ã–≤–æ–¥
    E.append(Paragraph("üìå –í—ã–≤–æ–¥ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", styles["Heading2"]))
    E.append(Paragraph("‚Äî –¢–µ–º–ø—ã –¥–µ–º–æ–Ω—Ç–∞–∂–∞ –ø—Ä–æ—Å–µ–ª–∏ (2025 vs 2024).", styles["Normal"]))
    E.append(Paragraph("‚Äî ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç.", styles["Normal"]))
    E.append(Paragraph("‚Äî –Æ–ó –≠–°, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°, –ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–° —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –ª—å–≤–∏–Ω—É—é –¥–æ–ª—é —Ä–∏—Å–∫–∞.", styles["Normal"]))
    E.append(Paragraph("‚Äî –ù—É–∂–Ω—ã: —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è, —É—Å–∏–ª–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Ç–∞–∂–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–≤ —Ñ–∏–ª–∏–∞–ª–æ–≤.", styles["Normal"]))

    doc.build(E)

def build_pptx(d):
    os.makedirs(OUT_DIR, exist_ok=True)
    prs = Presentation()

    # –°–ª–∞–π–¥ 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º—É –ø–æ–¥–≤–µ—Å—É –í–û–õ–°"
    slide.placeholders[1].text = f"–ê–û ¬´–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å¬ª ‚Ä¢ {d['as_of']}"

    # –°–ª–∞–π–¥ 2 ‚Äî –û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "1. –û–±—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"
    tf = slide.placeholders[1].text_frame
    tf.clear()
    for line in [
        f"–í—ã—è–≤–ª–µ–Ω–æ: {d['totals']['found']:,}".replace(',', ' '),
        f"–£–∑–∞–∫–æ–Ω–µ–Ω–æ: {d['totals']['legalized']:,}".replace(',', ' '),
        f"–î–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ 2025: {d['totals']['removed_2025']:,}".replace(',', ' ') + f" (2024: {d['totals']['removed_2024']:,}".replace(',', ' ') + ")",
        f"–í —Ä–∞–±–æ—Ç–µ: {d['totals']['in_work']:,}".replace(',', ' ') + f" (–†–æ—Å—Ç–µ–ª–µ–∫–æ–º ‚Äî {d['totals']['rostelecom']:,}".replace(',', ' ') + ")"
    ]:
        p = tf.add_paragraph(); p.text = line; p.font.size = Pt(20)

    # –°–ª–∞–π–¥ 3 ‚Äî –î–µ–º–æ–Ω—Ç–∞–∂ 2025
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "2. –î–µ–º–æ–Ω—Ç–∞–∂ 2025"
    tf = slide.placeholders[1].text_frame; tf.clear()
    for r in d["dismantled_2025"]:
        p = tf.add_paragraph()
        p.text = f"{r['branch']} ‚Äî {r['count']:,}".replace(',', ' ') + (f" ({r['notes']})" if r.get("notes") else "")
        p.font.size = Pt(20)

    # –°–ª–∞–π–¥ 4 ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã (—Ä–∞—Å–∫—Ä–∞—Å–∫–∞)
    colors_map = {"high": RGBColor(0xFF, 0x00, 0x00),
                  "medium": RGBColor(0xFF, 0xA5, 0x00),
                  "low": RGBColor(0xFF, 0xD7, 0x00)}
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã ‚Äî –∑–æ–Ω—ã —Ä–∏—Å–∫–∞"
    tf = slide.placeholders[1].text_frame; tf.clear()
    for r in d["key_branches"]:
        p = tf.add_paragraph()
        run = p.add_run()
        run.text = f"{r['branch']} ‚Äî {r['in_work']} ({r['note']})"
        run.font.size = Pt(20)
        run.font.color.rgb = colors_map[r["risk"]]

    # –°–ª–∞–π–¥ 5 ‚Äî –†–æ—Å—Ç–µ–ª–µ–∫–æ–º
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "4. –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª"
    tf = slide.placeholders[1].text_frame; tf.clear()
    p0 = tf.add_paragraph()
    p0.text = f"–û–±—â–∏–π –æ–±—ä—ë–º: {d['totals']['rostelecom']:,}".replace(',', ' ') + " –æ–ø–æ—Ä"
    p0.font.size = Pt(20)
    for r in d["rostelecom"]:
        p = tf.add_paragraph()
        p.text = f"{r['branch']} ‚Äî {r['note']}"
        p.font.size = Pt(20)

    # –°–ª–∞–π–¥ 6 ‚Äî –í—ã–≤–æ–¥
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "üìå –í—ã–≤–æ–¥ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
    tf = slide.placeholders[1].text_frame; tf.clear()
    for line in [
        "–¢–µ–º–ø—ã –¥–µ–º–æ–Ω—Ç–∞–∂–∞ –ø—Ä–æ—Å–µ–ª–∏ (2025 vs 2024).",
        "¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç.",
        "–Æ–ó –≠–°, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°, –ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–° ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –∑–æ–Ω–∞ —Ä–∏—Å–∫–∞.",
        "–ù—É–∂–Ω—ã: —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è, —É—Å–∏–ª–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Ç–∞–∂–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."
    ]:
        p = tf.add_paragraph(); p.text = line; p.font.size = Pt(20)

    prs.save(PPTX_PATH)

def main():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    build_pdf(data)
    build_pptx(data)
    print("–ì–æ—Ç–æ–≤–æ:", PDF_PATH, PPTX_PATH)

if __name__ == "__main__":
    main()
